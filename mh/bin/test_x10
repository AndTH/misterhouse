#!/bin/perl -w

# Test a CM11 and/or CM17 X10  device
#  - set the $interface, $port, $house, and $unit parms 

use lib '../lib', '../lib/site';

use Carp;
use strict;

my ($device, $port, $house, $unit, $interface);

                                # Use BEGIN so we can conditionally eval modules
BEGIN {
                                # Set these parms

    $interface = 'CM11';
#   $interface = 'CM17';

#   $port = '/dev/ttyS0';
    $port = 'COM5';

    $house = 'A';
    $unit  = '4';


    if ($^O eq "MSWin32") {
        eval "use Win32::SerialPort 0.17";
	    die "$@\n" if ($@);
        $device = Win32::SerialPort->new ($port) or die "Can't start $port\n";
    }
    else {
        eval "use Device::SerialPort 0.06";
	    die "$@\n" if ($@);
        $device = Device::SerialPort->new ($port) or die "Can't start $port\n";
    }

    if ($interface eq 'CM11') {
        eval "use ControlX10::CM11 qw( :FUNC 2.06 )";
	    die "$@\n" if ($@);
    }
    else {
        eval "use ControlX10::CM17 qw( send_cm17 0.05 )";
	    die "$@\n" if ($@);
    }

}


$device->error_msg(1);	# use built-in error messages
$device->user_msg(0);
$device->databits(8);
$device->baudrate(4800);
$device->parity("none");
$device->stopbits(1);
$device->dtr_active(1);
$device->handshake("none");
$device->write_settings || die "Could not set up port\n";

my $cmd   = 'J';

foreach (1..4) {
	&toggle;
	sleep 1;
}

sub toggle {
	print "---> Toggle light to $cmd\n";

    if ($interface eq 'CM11') {
        send_cm11($device, $house . $unit);
        send_cm11($device, $house . $cmd);
    }
    else {
        send_cm17($device, $house . $unit . $cmd);
    }

	$cmd = ($cmd eq 'J') ? 'K' : 'J';
}


