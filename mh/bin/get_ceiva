#!/usr/bin/perl
#  Last change Time-stamp: <2000-08-06 13:28:31 winter>
#---------------------------------------------------------------------------
#  File:
#      get_ceiva
#  Description:
#      See help text below
#  Author:
#      Bruce Winter    bruce@misterhouse.net   http://misterhouse.net
#  Latest version:
#      http://misterhouse.net/mh/bin
#  Change log:
#    07/22/00  Created.
#
# Instead of passing command line parms, create a mh.ini file and add:
#  
#  ceiva_username = member_name
#  ceiva_password = member_password
#  ceiva_frame_id = ### (this is the frame_id number that shows up in the 'now showing' url)
#  ceiva_dir      = /misterhouse/web/pictures
#  browser        = explorer/netscape 
#
#---------------------------------------------------------------------------

                                # Keep perl2exe happy, so we can make a stand alone get_ceiva.exe
                                # ... hmmm, does not work.  Must keep list inline for some reason
#perl2exe_include get_ceiva_perl2exe.pl


use strict;
my($Pgm_Path, $Pgm_Name, $Version);
BEGIN {
    ($Version) = q$Revision$ =~ /: (\S+)/; # Note: revision number is auto-updated by cvs
    ($Pgm_Path, $Pgm_Name) = $0 =~ /(.*)[\\\/](.*)\.?/;
    ($Pgm_Name) = $0 =~ /([^.]+)/, $Pgm_Path = '.' unless $Pgm_Name;
    eval "use lib '$Pgm_Path/../lib', '$Pgm_Path/../lib/site'"; # So perl2exe works
}
my %parms;
use Getopt::Long;
if (!&GetOptions(\%parms, "h", "help", "infile=s", "outdir=s", "reget", "reuse",
                 "frame_id=s", "username=s", "password=s"),
                 or @ARGV or ($parms{h} or $parms{help})) {
    print<<eof;

$Pgm_Name gets pictures from the 'now showing' folder of a Ceiva.com web page.

  Version: $Version
  Usage:

   $Pgm_Name [options]

    -h        => This help text

    -username xyz => xyz is a ceiva member name
    -password xyz => xyz is a ceiva password   
    -frame_id xyz => xyz is a ceiva frame_id

    -outdir xyz   => xyz the directory the pictures will be put in
    -browser xyz  => xyz is the path to your html browser
    -reget        => Re-fetch the files, even if they look current

  Examples:
    $Pgm_Name -outdir /pictures/ceiva
    $Pgm_Name -reget
eof
    exit;
}

&setup;
&get_pictures;

sub get_pictures {
    my $infile = $parms{infile};
    $infile = "$parms{outdir}/ceiva.html" unless $infile;

    print "Checking $infile\n";
#   if ((-e $infile) and (1 > -M $infile) and (4000 < -s $infile) and !$parms{reget}) {
    if ($parms{reuse}) {
        print "Reusing file: $infile\n";
    }
    else {
        die "-username option not specified and not found in mh.ini\n" unless $parms{username};
        die "-password option not specified and not found in mh.ini\n" unless $parms{password};
        die "-frame_id option not specified and not found in mh.ini\n" unless $parms{frame_id};
        my $url1 = "http://www.ceiva.com/signin.asp?member_username=$parms{username}&member_passwd=$parms{password}&action=signin";
        my $url2 = "http://www.ceiva.com/frame_queue.asp?status=framed&action=browse&frame_id=$parms{frame_id}";

        use LWP::Simple;
        use HTTP::Cookies;
        use LWP::UserAgent;

                                # Set up cookie jar and sign in
        print "Logging in to Ceiva\n";
        my $request = HTTP::Request->new(GET => $url1);
        my $cookies = HTTP::Cookies->new;
        my $ua      = LWP::UserAgent->new;
#                     (file => 'cookies.txt', autosave => 1, ignore_discard => 0, HTTP_COOKIE => 1 );

                                # For some reason, we must have an empty USER= cookie set, or else
                                # ceiva will return 'browser does not support cookies' msg!?!
        $cookies -> set_cookie(undef,              # $version,
                               'info',             # $key,
                               'USER=',            # $val,
                               '/',                # $path,
                               'www.ceiva.com');   # $domain,
        $ua -> cookie_jar($cookies); 
        $ua -> request($request, "$parms{outdir}/ceiva_login.html");

        print "Requesting current picture index\n";
        $request = HTTP::Request->new(GET => $url2);
        $ua -> request($request, $infile);

    }
    
    print "Filtering $infile\n";
    open FILE, $infile or die "Could not open html file $infile: $!\n";
    my ($index1, $index2, $new_stuff);
    while (<FILE>) {

# Looking for all the jpeg_content strings, all in one tr entry
#   <img src=jpeg_content.asp?opt=t&id=13517%2E0%2E14754
#   <img src=jpeg_content.asp?opt=t&id=13583%2E9%2E14844
        if (/jpeg_content/) {
            my @ids;
            while (/t\&id=(\S+)/g) {
                push @ids, $1;
            }
            print "Found ", scalar @ids, " pictures\n";
            for my $id (@ids) {
                $id =~ s/%([0-9a-fA-F]{2})/pack("c",hex($1))/ge; # Translate %2E back to .
                                # .t is tiny, .p is midsized, .f is full sized
#               my $file1 = "$parms{outdir}/$id.t.jpg";
                my $file1 = "$parms{outdir}/$id.p.jpg";
                my $file2 = "$parms{outdir}/$id.f.jpg";
                $index1 .= "<a href=$id.f.jpg><img src=$id.p.jpg></a>\n";
                $index2 .= "<br><img src=$id.f.jpg>\n";
#               if ((-e $file2) and (1 > -M $file2) and (2000 < -s $file2) and !$parms{reget}) {
                if ((-e $file2) and (2000 < -s $file2) and !$parms{reget}) {
                    print "File exists: $file2\n";
                    next;
                }
                my $url1 = "http://www.ceiva.com/jpeg_content.asp?opt=p&id=$id";
                my $url2 = "http://www.ceiva.com/jpeg_content.asp?opt=f&id=$id";
                print "Requesting url: $url2\n";
                getstore $url1, $file1;
                getstore $url2, $file2;
                $new_stuff++;
            }
        }
    }
    &file_write("$parms{outdir}/index.html", $index1 . $index2);
    my $url = "$parms{outdir}/index.html";
    $url =~ s|/|\\|g if $^O eq "MSWin32";
    system "$parms{browser} $url" if $new_stuff;
    return $new_stuff;
}

sub setup {
    require 'handy_utilities.pl';      # For read_mh_opts 
    my %config_parms;
    &main::read_mh_opts(\%config_parms, $Pgm_Path);
    $parms{username} = $config_parms{ceiva_username}       unless $parms{username};
    $parms{password} = $config_parms{ceiva_password}       unless $parms{password};
    $parms{frame_id} = $config_parms{ceiva_frame_id}       unless $parms{frame_id};
    $parms{outdir}   = $config_parms{ceiva_dir}            unless $parms{outdir};
    $parms{outdir}   = $config_parms{html_dir}."/pictures" unless $parms{outdir};
    $parms{browser}  = $config_parms{browser}              unless $parms{browser};
    $parms{browser}  = 'explorer'                          unless $parms{browser};


}


#
# $Log$
# Revision 2.1  2000/08/06 21:56:43  winter
# - See 2.24 release notes.
#
#
