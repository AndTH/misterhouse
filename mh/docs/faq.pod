=pod


=head1 1: MisterHouse operational questions


=head2 1.1: What OSes can it run on?

It has been tested on Windows 95, 98, NT 4.0, and 2K.  On Unix, it has been run on
Linux, AIX, and Sun.

In theory, any OS that runs perl should be able to run mh.  In practice, some platforms
will likely have strange Serial Interfaces (e.g. Mac?), so the Serial IO related
function would take some work.

=head2 1.2: How can I make it run faster and use less memory?

On my Celron 400 Mhz computer running Windows 98, using 60 code files with 6000 lines of code,
mh takes 10% the cpu, running at 9 passes per second and using about 20 MB of memory. 

If you are happy with the Web interface and don't need the Tk interface, turn it off
by editing the Tk mh.ini parm or run:

   mh -tk 0

If you want the tk window, but don't use the Command/Items/Group pull down menus, try:

   mh -tk_comands 0 -tk_items 0 -tk_groups 0

You can turn off the tk 'eye' that bounces back and forth by deleting the tk_eye.pl code file.

You can speed up / slow down mh, using more/less cpu, by mh.ini sleep_time parm. 


=head2 1.3: How can I easily upgrade to the latest version of mh?

Point your mh.ini code_dir, data_dir, and html_dir parms to somplace other than your mh path.  
Then you should be able to rename your old mh directory and unzip the new one in its place without loosing
anything.  Also keep your mh.private.ini somewhere else (see next question).

=head2 1.4: How does mh.ini work?

All the entries in mh.ini are read on mh Startup and on a Reload.  They are stored 
in the %config_parms array.  So, for example, if you added:

  myparm1=a b c

Then, mh would set $config_parms{myparm1} = 'a b c';

These parms also defined what are legal startup values, so if you want to try
a different value, instead of editing your mh.ini, you can run:

  mh -myparm1 'd e f'

Rather then edit the default mh.ini file, the best approach is to copy just
the parms you want to change to your own .ini file (e.g. mh.private.ini), then 
set the environmental variable mh_parms to point where you keep that file
(see the header of mh/bin/mh.ini for more detail).

While the %config_parms array IS refreshed on a mh Reload, some parms are only used
on mh startup (e.g. http_port), so will only be reloaded when you re-start mh.

=head2 1.5: Can I run run mh in a 'fast debug mode'?

Funny you should ask :)  Check out the time_start, time_stop, and time_increment parms
in the mh.ini file.  Here are some examples:

   mh -time_start 0 -time_stop 24 -tk 0 -voice_text 0
   mh -time_start "6 AM" -time_stop "11 PM"  -time_increment 1
   mh -time_start "5/14 7:10" -time_stop "5/15 10 PM" -time_increment 300


=head2 1.6: How are the X10 and Serial Items implemented, indpendent of the platform?

This answer is authored by Bill Birthisel, author of the SerialPort and CommPort modules.

The user works with an X10_Item which reflects physical hardware and
the state of that hardware. The user "loop" code deals with the state and
conditions which alter it. This code is independent of OS and specific to
mh.

X10_Items talk to Serial_Items which implement a software protocol
required by the model and type of the actual hardware. The Serial_Items
can use protocol translator modules such as CM11.pm, HomeBase.pm,
and CM17.pm. But the output is platform-independent serial commands
to the next layer. The protocol translator modules are publicly available
outside mh and may be used by code other than Serial_Items. These modules will
eventually be on CPAN. The code is still independent of OS.
Other Serial_Item types, including "generic" read/write ports, also exist.

Win32::SerialPort.pm and Device::SerialPort.pm are CPAN modules which
actually implement the serial command interface. Device::SerialPort is a
clone of its Win32 cousin. These modules handle high-level OS issues
including device names, configuration files, and validation of port 
settings.

Each also calls a CPAN module to handle low-level interfacing to the OS
and the serial driver: Win32API::CommPort.pm or POSIX.pm (you guessed
correctly ;-)


=head2 1.7: mh seems way too complicated.  How can I run something simple?

Copy mh\code\test\test_x10.pl into your own code dir (e.g. c:\mh_code).  Then run:

mh -code_dir c:\mh_code

You can then use http://localhost:8080 for control.  If you also want the local Tk
windows, also copy the tk* code files.


=head2 1.8: Is there a way I can have direct X10 control with a simple perl script?

If all you want to do is control X10 devices with a cron job or from your own cgi scripts,
running mh is probably overkill.  You can send X10 commands using either the ActiveHome
interface (CM11) or the cheaper Firecracker interface (CM17) using the modules
and documentation found in mh/lib/site/ControlX10 or download them from CPAN.
Examples can be found in mh/lib/site/test_cm11.pl and test_cm17.pl.

=head2 1.9: Can I send mh commands from other programs?

You can send mh commands (Voice_Cmd text strings) from other programs in one of 3 ways:

- Write commands to the file specified in the mh.ini xcmd_file parm.  By default this
is mh/house_cmd.txt. See mh/bin/house and mh/bin/house.bat for examples.

- Use mh/bin/mhsend to send commands via sockets (can be over the internet).  If you have
run mh/bin/set_password, the mhsend -password parm is required.   To enable this, include
the code mh/test/code/mhsend_server.pl in your code directory.  

You can also control mh remotely via email (see faq question 'Can do I send mh comands via email?'),
telnet sessions (if running mh/code/test/telent.pl), and via the built in web server.


=head2 1.11: How can I debug a problem?

Lots of debug errata can be controled with the mh -debug switch.  Most of this code is probably 
meaningful only if you dig into the source code, so most people probably will not use
it unless you are generating debug to send to the author.  To create a log file with debug in it,
run:

  mh -log debug.log -debug xyz

Where xyz can be any of the following:

  X10    
  serial 
  socket
  startup
  homebase
  misc
  http
  port_name of socket port


=head2 1.12: How can I debug time event problem?

One way is to create a code member that contains just the event you are trying to debug, then run mh on 
just that one member.  For example, create a member called \temp\test_time.pl with this code:

  print "min=$Minute\n" if $New_Minute;
  print "hour=$Hour\n"  if $New_Hour;
  print "debug1 it is now $Time_Now\n" if time_now "11:59 PM";
  print "debug2 it is now $Time_Now\n" if time_now "23:59";
  print "debug3 it is now $Time_Now\n" if time_now "12:00 AM";
  print "debug4 it is now $Time_Now\n" if time_now "00:00";
 

Then run mh using these parameters:

  mh -code_dir \temp -tk 0 -time_start '12/15 11:58 pm' -time_start '12/16 12:01 am'

Note, you can run this test mh quickly without stoping your normal mh.  

=head2 1.13: What are the advantages/disadvantages to running the compiled versions of mh?

Advantages:

=over

=item *

You don't need the latest version of perl installed

=item *

You don't have to install additional perl modules

=back

Disadvantages:

=over

=item *

For some reason, starting mh with the compiled versions is slower.  On my windows box, it is 10 seconds -vs- 20 seconds.

=item *

You can apply quick patches to mh, -vs- downloading a larger, less frequently updated mh.exe file.

=back

The memory and cpu used, once mh is started, is the same.


=head1 2: MisterHouse coding questions

=head2 2.1: How do I debug syntax errors in my code?

This is an area that needs some work.  When mh loads your code in, it does so
with a perl 'eval' function.  If there are errors in that code, eval often does
not point to the specific line with the problem.

The best error information is in the mh console window.  There is a tk window
that will pop up, but unfortunatly, I have not figured out how to capture 
the more relevant error message from the console window.

I think the best solution here is some sort of mh/perl lint checker.  That
will look at member code directly.  If we have the main interpretor
see the error, instead of the eval function, the error messages will be
easier to diagnose.

When you go to write new code, first start mh with old code that works, then edit or copy in 
your new code and do a mh Reload.  Fixing errors with code Reloads is much 
quicker than trying to fix them on mh startup.  You can add/delete the .pl suffix
on code members between reloads to enable/disable them.


=head2 2.2: How should I code events that should occur only at infrequently, or 
only at Startup?

You can use the $Startup or $Reload variables for events that should only
occur when mh is Started, or when code is Reloaded.  Note that $Reload
is also true when $Startup is true.

To run events infrequently, you can use the modulus operator (%),
$New_Second/Hour/Day/Month/Year variables,
or the Time_Now/Time_Cron functions to control events.

The $New_xxx variables are 1 (true) for each pass that the xxx variable gets incremented, 
and 0 for all other passes.  For example, $New_Hour is true for one pass
when $Hour changes from one hour to another.

Here are some examples:

  print_log "Only at startup" if $Startup;

  print_log "Every 5 minutes" if $New_Minute and !($Minute % 5);

  print_log "At 10:05 pm" if time_now '10:05 PM';

  print_log "Every weekday at 2:15 am" time_cron '2 15 * * 1-5';


=head2 2.3: How should I structure my Perl code?

Pretty much anyway you want!  You may want to put object definitions all in one 
member (e.g. mh/code/Bruce/items.pl) so you can easily change device codes,
or you may want to define the objects in the file members you use them in.

If the same object is defined in multiple members, it will still work ok, although
some object types (e.g. Voice_Item) will warn about duplicate names.


=head2 2.4: Can I create variables that can be shared between code members?

Yep.  All objects definitions (e.g. $light = new X10_Item('C5')) are always shared.  They are pulled out of the member loop by mh.

All other variable declarations must be made using with 'my' or 'use vars':

   my ($my_var1, $my_var2);
   use vars '$my_var1', '$my_var2';
   use vars qw($my_var1 $my_var2);

The last example uses the qw function (Quote Words) to save you from the ' and , punctuation.

If you code a 'my' or 'use var' record that starts in column 1,
mh will pull these records out of the member loop code (as it did with object definitions),
so that the variable can now be shared with other code members.

If the 'my' or 'use var' record does not start in column 1, the variable declaration
is left in with the rest of the member code and is local to that member.

If you want to use the variable with any mh/web/*.pl script when creating
mh web pages, you must use 'use vars', as 'my' variables can not be shared with the server.


=head2 2.5: How can I move code out of the loop code?

Sometimes you may need to have mh run code out of the loop code.  For example, if you
want to create a Voice_Cmd object that has states that are read from a file.  Since
objects are moved out of the loop code by mh, we need to also move any other code used
to define that object.

You can tell mh to do this using '# noloop=start/stop' comments.  For example:

   # noloop=start
   my $mp3names;
   while ( my $mp3name = <d:/songs/*.mp3> ) {
      $mp3name =~ s#^.*/##;  # remove path
      $mp3name =~ s#\..*$##; # remove extension
      $mp3names .= "," if $mp3names;
      $mp3names .= $mp3name;
   }
  # noloop=stop

  $v_play_music = new Voice_Cmd("Play [$mp3names]");
  if ($state = said $v_play_music) {
     speak "Playing song $state";
     run("winamp d:/songs/$state.mp3")
  }


=head2 2.6: How can I add my own subroutines?

You can add your own subroutines anywhere in any of your code files.  These can then be 
called by that member or any other member.  Here is a couple of examples:

   print_log &mysub1(9990, 9);

   sub mysub1 {
      my ($a, $b) = @_;
      my $c = $a + $b;
      return "The answer is: $a + $b = $c";
   }


   $v_bedroom_curtain  = new  Voice_Cmd('[open,close] the bedroom curtains');
   &curtain_on('bedroom', $state) if $state = said $v_bedroom_curtain;

   sub curtain_on {
       my($room, $action) = @_;
       set $curtain_updown  $action;
       eval "set \$curtain_$room ON;";
   }

=head2 2.7: What other special global variables are there?

Here are a few:

  $Pgm_Path is the directory that that mh/bin/mh is found in.
  $Pgm_Root is one directory above $Pgm_Path
  $OS_win is true on windows, false otherwise.  $^O will reflect the OS name.

=head2 2.8: Can I use mh to control other windows

On Windows (95,98, NT), you can use the SendKeys to send keystrokes to other windows.  See mh.html for details.

If anyone knows of an equivalent function for linux, let me know.  Linux is usually clever enough to have
command line options, so there is less of a need here.



=head2 2.9: What data is saved when mh is exited and restarted?

The state of all objects (Timer Serial_Item X10_Item X10_Appliance File_Item Generic_Item) and all the $Save variables.

Every 5 minutes while mh is running, and whenever mh is exited, the state of these variables are saved to your code directory in a member called mh_temp.saved_states.  When you start mh, this member is run to restore the states.

You can make up any members to the $Save array.  For example, you can use $Save{sleeping_cat} to track whenever your cat is asleep.


=head2 2.10: How can I turn a bunch of lights on/off all at once?

You can turn all the lights on a single house code on/off by specifying just the house code letter.  For example:

   $v_bedroom_lights = new Voice_Cmd('Bedroom lights [on,off]');
   $bedroom_lights   = new X10_Item('P');
   set $bedroom_lights $state if $state = said $v_bedroom_lights;

You can also create a group of X10 items.  Here is an example that would turn all lights on/off in several rooms.  

  $all_lights_bed    = new X10_Item('P');
  $all_lights_living = new X10_Item('O');
  $all_lights  = new Group($all_lights_bed, $all_lights_living);

  $v_lights_all = new  Voice_Cmd('All lights [on,off]');
  set $all_lights $state if $state = said $v_lights_all;


=head2 2.11: How do I get mh to stop telling the time each minute?

Out of the box, mh defaults to running all the code in the mh/code/test directory.  Once you have played around
with the example code, you will want to create your own code directory (probably somewhere other than in mh/code, so 
you can easily upgrade to new versions of mh), and copy just the code members you find useful.  
Members test_tagline and the hello_speak members are the main sources of the periodic test speech.

If you want to use the Tk interface, make sure you copy tk_*.pl members.  
See the FAQ question 'How does mh.ini work' on how to modify the code_dir parm to point to your new code directory.


=head2 2.12: Can do I send mh comands via email?

Set the mh.ini net_mail_command_code parm to a secret code, and copy mh/code/test/internet_mail.pl
into your code directory.   Now you can send email with the following string either
in the subject or the body of your email:

  command:your command    code:your_code

The internet_mail.pl code periodicaly runs the get_email process and then scans for the above string.
If found, it will send a confirmation email saying either "command run", "command not found", 
or "command not authorized".

=head1 3: Linux specific questions

=head2 3.1: When I run Viavoice and festival at the same time I get "Can't open output file '/dev/dsp'"

Answer complements of Brent L Johnson.

The problem is, festival or another sound program, is locking your dsp device.
The sound drivers that come stock in the Linux kernel do not allow more than one program to access the /dev/dsp at one time. 
If you are using RedHat, you can use ESD to multiplex the soundcard usage.
The problem is, not all sound programs are esd aware. Festival and Viavoice  do not directly support esd.
ESD does have a workaround that _sometimes_ works with non-esd aware programs.
Try starting your sound programs, festival and viavoice under esddsp.
For example: "esddsp festival --server &". 
I had some success with this route but it doesn't always work because of sampling rates and such. 

The best fix would be to replace OSS with ALSA. http://www.alsa-project.org.
The ALSA drivers directly support multiplexing the dsp devices. 
The only problem is they currently support fewer cards than the OSS drivers that come with the Linux kernel.
Check out the web page and see if your card is supported. If it is, the best avenue would be replacing OSS with ALSA.


=head1 4: Windows specific questions

=head2 4.1: mh seems to cause some windows to hang

If you are experiencing problems with windows not popping
up when they should (e.g. control panel or install shield), 
you will want to install DCOM 1.3, available from here:

  http://www.microsoft.com/com/dcom/dcom98/dcom1_3.asp

Note, I had run all the 'Windows updates', including the Service Pack 2, but
I still had the problem until I installed the above.

For Windows 95, the update is at:

  http://www.microsoft.com/com/dcom/dcom95/dcom1_3.asp
  

=head1 5: Perl questions

=head2 5.1: Whats the best way to learn perl?

Using MisterHouse ;-)  Much more fun that trying to code up that report generator at work!
Some good books are referenced in mh.html.



=head1 6: Misc questions

=head2 6.1: Misterhouse Timeline

Here is a rough timeline of MisterHouse development:

 - 12/96 Coded a predecessor called House_Menu
 -  8/98 Re-wrote everything, called it MisterHouse
 -  9/98 Uploaded to the web
 - 10/98 Created compiled version.
 - 11/98 First known user.
 - 01/99 Started mailing list
 - 02/99 Ported to Unix/Linux
 - 03/99 Article in Popular Home Automation
 - 05/99 Registered misterhouse.net domain name (misterhouse.com is owned 
         by misterhouse.it,  an Italian Real Estate company ... go figure!)
 - 06/99 Added CM17 & HomeBase support
 - 06/99 Article in HomeToys: http://hometoys.com/htinews/jun99/articles/winter/winter.htm
 - 08/99 Mailing list reaches 100 members
 - 09/99 Added LCDproc and IRman support
 - 10/99 Article in Circuit Cellar Ink: href=http://www.circuitcellar.com/pastissues/articles/winter111/winter.pdf
 - 11/99 Linux VR using IBM's ViaVoice
 - 11/99 HomeVision support
 - 11/99 Mailing list reaches 200 members

=head2 6.2: Who is that Bruce guy anyway?

MisterHouse author, Bruce Winter, has a day job with IBM in Rochester, Minnesota, helping design ASIC integrated circuits.
He got started with Home Automation as one of the first ECS users in '86 and started the ECS mailing list
in early '94.  Loves getting slaughtered by his twin boys in Quake death matches, hiking
in Montana, and playing his digital piano.

=head2 6.3: Why open source?

You should know the answer to this one already ... because it is 'the thing to do' ;-)

That and clearly MisterHouse has developed much faster, with the help of a wider user base
and help from other coders, than it would have if it were proprietary.  

Plus it feels good to give stuff back to the growing open source community.


=head2 6.4: Misc Home Automation links

Here are some useful/related Home Automation links:

  Dan Hoehnens most excelent colection of HA links:
    http://www.infinet.com/~dhoehnen/ha/list.html

  Lots of good tutorials and articles are here:
    http://hometoys.com/

=cut


#
# $Log$
# Revision 1.1  2000/01/19 14:00:23  winter
# Initial revision
#
# Revision 1.7  2000/01/13 13:36:34  winter
# - add useful links
#
# Revision 1.6  2000/01/02 23:38:23  winter
# - renumbered.  Added 1.13
#
# Revision 1.5  1999/12/12 23:51:34  winter
# - added 'too compiliated', 'simple perl', 'commands via email'
#
# Revision 1.4  1999/11/21 02:54:11  winter
# - add 'debug a problem', and 'stop telling time'.
#
# Revision 1.3  1999/11/08 02:11:28  winter
# - add all lights, and save on exit questions
#
# Revision 1.2  1999/09/27 03:09:39  winter
# - add pointer to DCOM 1.3 update
#
# Revision 1.1  1999/09/12 16:08:42  winter
# - Created
#
#
